class FunctionCase:
	def __init__(self,item):
		self.item=item

	# 筛选输入框：


	# 预期结果：筛选到内容的数量、筛选到的内容准确
	# 影响字段：是否支持模糊查询、是否支持联想输入自动补全
	def FilterInputBox(self,fuzzyQuery, associatingInputing):
		if fuzzyQuery:
			case01=[self.item+":"+"模糊查询输入不完整正常测试","筛选框内输入筛选条件不完整筛选内容，进行筛选，其他全部正确。","筛选到内容的数量正确；筛选到的内容准确；"]
			case02=[self.item+":"+"模糊查询输入完整正常测试","筛选框内输入筛选条件完整筛选内容，进行筛选，其他全部正确。","筛选到内容的数量正确；筛选到的内容准确；筛选到包含输入内容的全部筛选结果；"]
			case03=[self.item+":"+"筛选内容存在正常测试","筛选框内输入筛选条件进行筛选，其他全部正确。","筛选到内容的数量正确；筛选到的内容准确；"]
			case04=[self.item+":"+"筛选内容不存在异常测试","筛选框内输入筛选条件进行筛选，筛选内容不存在，其他全部正确。","筛选内容为空；"]
			if associatingInputing:
				case07 = [self.item + ":" + "联想输入自动补全输入不完整正常测试", "筛选框内输入筛选内容不完整进行筛选，其他全部正确。", "包含输入内容项在输入框下方显示；"]
				case08 = [self.item + ":" + "联想输入自动补全输入内容多次变更正常测试", "筛选框内输入筛选内容多次变更进行筛选，其他全部正确。", "输入内容变更输入框下方的显示内容随时更新；"]
				case09 = [self.item + ":" + "联想输入自动补全输入内容不存在异常测试", "筛选框内输入筛选内容不存在进行筛选，其他全部正确。", "输入内容不存在时输入框下方的显示内容为空；"]
				case10 = [self.item + ":" + "联想输入自动补全输入鼠标选中推荐项正常测试", "筛选框内输入筛选内容进行筛选，鼠标点击选中推荐项，其他全部正确。", "鼠标点击推荐项，推荐内容显示在输入框中；"]
				case11 = [self.item + ":" + "联想输入自动补全输入键盘上下键选中推荐项正常测试", "筛选框内输入筛选内容进行筛选，键盘上下键选中推荐项，点击enter键，其他全部正确。", "键盘上下键推荐项，推荐内容显示在输入框中；"]

			cases=[case01,case02,case03,case04,case07,case08,case09,case10,case11]
		else:
			case01=[self.item+":"+"查询正常测试","筛选框内输入完整筛选内容，进行筛选，其他全部正确。","筛选到内容的数量正确；筛选到的内容准确；"]
			case02=[self.item+":"+"筛选内容存在正常测试","筛选框内输入筛选条件进行筛选，其他全部正确。","筛选到内容的数量正确；筛选到的内容准确；"]
			case03=[self.item+":"+"筛选内容不存在异常测试","筛选框内输入筛选条件进行筛选，筛选内容不存在，其他全部正确。","筛选内容为空；"]
			if associatingInputing:
				case07 = [self.item + ":" + "联想输入自动补全输入不完整正常测试", "筛选框内输入筛选内容不完整进行筛选，其他全部正确。", "包含输入内容项在输入框下方显示；"]
				case08 = [self.item + ":" + "联想输入自动补全输入内容多次变更正常测试", "筛选框内输入筛选内容多次变更进行筛选，其他全部正确。",
				          "输入内容变更输入框下方的显示内容随时更新；"]
				case09 = [self.item + ":" + "联想输入自动补全输入内容不存在异常测试", "筛选框内输入筛选内容不存在进行筛选，其他全部正确。", "输入内容不存在时输入框下方的显示内容为空；"]
				case10 = [self.item + ":" + "联想输入自动补全输入鼠标选中推荐项正常测试", "筛选框内输入筛选内容进行筛选，鼠标点击选中推荐项，其他全部正确。",
				           "鼠标点击推荐项，推荐内容显示在输入框中；"]
				case11 = [self.item + ":" + "联想输入自动补全输入键盘上下键选中推荐项正常测试", "筛选框内输入筛选内容进行筛选，键盘上下键选中推荐项，点击enter键，其他全部正确。",
				           "键盘上下键推荐项，推荐内容显示在输入框中；"]
			cases = [case01, case02, case03, case07, case08, case09, case10, case11]
		return cases

	# 输入框必测：
	# 支持复制、剪切、手输、修改、删除、默认显示内容正确
	# 输入内容过长显示正确
	# 特殊字符 %、sql注入“; and 1 = 1 and 1 = 2”
	# 筛选框名称正确
	# 筛选下拉框：
	# 影响字段：是否支持手动输入、是否支持多选
	# 测试点：可筛选条件正确、每个筛选条件进行筛选，结果正确、筛选条件组合筛选
	def testPoint(self,manual):
		if manual:
			case01=[self.item+":"+"输入框内输入内容进行复制","对输入框内输入内容进行复制，粘贴到记事本","支持"]
			case02 = [self.item + ":" + "输入框内输入内容进行剪切", "对输入框内输入内容进行剪切，粘贴到记事本", "支持"]
			case03 = [self.item + ":" + "输入框内输入内容进行手动输入", "对输入框内输入内容进行手动输入", "支持"]
			case04 = [self.item + ":" + "输入框内输入内容进行删除", "对输入框内输入内容进行手动删除", "支持"]
			case05 = [self.item + ":" + "检查输入框内默认显示内容", "检查输入框内默认显示内容", "显示正确"]
			case06 = [self.item + ":" + "检查输入框名称显示内容", "检查输入框名称显示内容", "显示正确"]
			case07 = [self.item + ":" + "输入框内输入特殊字符%", "输入框内输入特殊字符%，其他操作正确，异常测试", "结果正确"]
			case08 = [self.item + ":" + "输入框内输入特殊字符“; and 1 = 1 and 1 = 2”", "输入框内输入特殊字符“; and 1 = 1 and 1 = 2”，其他操作正确，异常测试", "结果正确"]


class Variable:
	pass




'''
筛选输入框：
影响字段：是否支持模糊查询、是否支持联想输入自动补全
测试点：筛选内容存在、筛选内容不存在、特殊字符%、sql注入“; and 1=1 and 1=2”
预期结果：筛选到内容的数量、筛选到的内容准确
筛选下拉框：
影响字段：是否支持手动输入、是否支持多选
测试点：可筛选条件正确、每个筛选条件进行筛选，结果正确、筛选条件组合筛选
预期结果：筛选到内容的数量、筛选到的内容准确
筛选框组合筛选：
筛选条件
'''
'''
输入框必测：
支持复制、剪切、手输、修改、删除、默认显示内容正确
输入内容过长显示正确
筛选框名称正确
'''
'''
web页必测内容：
文字内容、位置正确，无错别字
图片内容、位置正确
表格内容、格式、位置正确
版式风格统一、整齐
文字、图片、表格没有重叠、混乱
'''
'''
列表分页p:
每页显示条数
首页
上一页
指定页
下一页
末页
跳转指定页
确认按钮
当前显示的条数
列表共计的条数
'''
'''
提交输入框：
测试点：组成规则、类型、长度、取值范围、是否为空、是否重复
预期结果：正确结果、错误结果
输入框必测：
支持复制、剪切、手输、修改、删除、默认显示内容正确
输入内容过长显示正确
筛选框名称正确
'''
'''
筛选输入框,筛选下拉框,提交输入框,列表分页p,web页必测内容,筛选框组合筛选

'''